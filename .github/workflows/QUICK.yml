name: Quick check

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

# For a PR #7488 against main branch, the `group` will become: CI-{{ 7488 || github.sha }}
# which eventually evaluates to: CI-7488 and 'sha' isn't used.
# NOTE: `||` acts as a logical OR and a default operator both,
# see: https://docs.github.com/en/actions/learn-github-actions/expressions#operators.
# When it isn't a PR against main but instead a commit pushed (or merged) to main, then `group` will
# evaluate to `${{ github.sha }}` but "cancel-in-progress" evaluates to false, so the CI on main
# will run in a new group `${{ github.sha }}`, but no previous CI will be cancelled on main
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}


env:
  MACOSX_DEPLOYMENT_TARGET: 14.0

jobs:
  Build:
    name: LFortran CI (${{ matrix.python-version }}, ${{ matrix.os }}, LLVM ${{ matrix.llvm-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest 
            python-version: "3.10"
            llvm-version: "11"
            build-type: "Debug"
          # we need to run with ubuntu in debug mode with LLVM 11 and 20 both
          - os: ubuntu-latest
            python-version: "3.10"
            llvm-version: "11"
            build-type: "Debug"
          - os: ubuntu-latest
            python-version: "3.10"
            llvm-version: "20"
            build-type: "Debug"
          # we build LFortran on windows in release mode
          - os: windows-2025
            python-version: "3.10"
            llvm-version: "11"
            build-type: "Release"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/new_environment.yml
          create-args: >-
            python=${{ matrix.python-version }}
            llvmdev=${{ matrix.llvm-version }}
            make=4.3

      - uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}-${{ matrix.os }}

      # we need to run this only once for debugging purpose
      - name: Print github concurrent group name
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
          echo "Concurrency Group: ${{ github.workflow }}-${{ github.event.number || github.sha }}"
          echo "Cancel-in-progress: ${{ github.event_name == 'pull_request' }}"

      - name: Check for Added Binary Files
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: python3 check_binary_file_in_git_history.py

      - name: Install Windows Packages
        if: contains(matrix.os, 'windows')
        shell: bash -e -l {0}
        run: micromamba install m2-bison=3.0.4 m2-filesystem cmake=3.21.1

      - name: Install Linux / macOS Packages
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        shell: bash -e -l {0}
        run: micromamba install bison=3.4 openmpi=5.0.6 openblas=0.3.21 llvm-openmp=14.0.4 nodejs=18.20.4 pandoc=3.1.13

      - name: Install Linux Packages
        if: contains(matrix.os, 'ubuntu')
        shell: bash -e -l {0}
        # we probably need to explicitly specify the different versions on with LLVM 11 and LLVM 20 both
        run: micromamba install kokkos

      - name: Install libunwind
        if: contains(matrix.os, 'ubuntu') && (matrix.llvm-version != 11)
        run: micromamba install -y -n lf libunwind=1.7.2

      - name: Setup Platform
        shell: bash -e -l {0}
        run: |
            echo "LFORTRAN_CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
            echo "CMAKE_C_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
            echo "CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
            echo "ENABLE_RUNTIME_STACKTRACE=yes" >> $GITHUB_ENV

      - name: Build (Linux / macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            export CXXFLAGS="-Werror"
            export CFLAGS="-Werror"
            export WIN=0
            shell ci/build_tmp.sh

      - name: Build (Windows)
        if: contains(matrix.os, 'windows')
        shell: cmd
        run: |
            set MAMBA_INSTALL_LOCN=C:\\Users\runneradmin\micromamba
            call %MAMBA_INSTALL_LOCN%\Scripts\activate.bat
            call micromamba activate lf
            set LFORTRAN_CMAKE_GENERATOR=Ninja
            set WIN=1
            set MACOS=0
            set ENABLE_RUNTIME_STACKTRACE=no
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
            set CC=cl.exe
            set CXX=cl.exe
            set "PATH=%PATH:C:\mingw64\bin;=%"
            shell ci\build_tmp.sh

      - name: Test (Linux / macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            case "$OSTYPE" in darwin*) export MACOS=1;; *) export MACOS=0;; esac
            case "$OSTYPE" in linux-gnu*) export LINUX=1;; *) export LINUX=0;; esac
            export LFORTRAN_LLVM_VERSION=${{ matrix.llvm-version }}
            export LFORTRAN_TEST_ENV_VAR='STATUS OK!'
            shell ci/test.sh

      - name: Test LFortran's Command Line Interface (Linux / macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            ./test_lfortran_cmdline

      - name: Test with specific Fortran standard
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            cd ./integration_tests
            ./run_tests.py -b llvm --std=f23
            ./run_tests.py -b llvm -f --std=f23 -nf16

      - name: Test (Windows)
        if: contains(matrix.os, 'windows')
        shell: cmd
        run: |
            set MAMBA_INSTALL_LOCN=C:\\Users\runneradmin\micromamba
            call %MAMBA_INSTALL_LOCN%\Scripts\activate.bat
            call micromamba activate lf
            set LFORTRAN_CMAKE_GENERATOR=Ninja
            set WIN=1
            set MACOS=0
            set ENABLE_RUNTIME_STACKTRACE=no
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
            set CC=cl.exe
            set CXX=cl.exe
            set "PATH=%PATH:C:\mingw64\bin;=%"
            shell ci\test.sh

      # below code is taken from earlier "LSP Tests" CI job
      - name: Install Timeout (macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'macos')
        run: brew install coreutils

      # ~/.bash_logout wanted to run `/usr/bin/clear_console -q` while exiting
      # login shells which frequently erred on ubuntu-latest since the shell was
      # not run interactively.
      - name: Disable ~/.bash_logout (Linux)
        shell: bash -e {0}
        if: contains(matrix.os, 'ubuntu')
        run: mv -v ~/.bash_logout ~/.bash_logout.bak

      - name: LSP Test (Linux / macOS)
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        timeout-minutes: 5
        env:
            EXIT_SUCCESS: 0
            EXIT_TIMEOUT: 124
            EXIT_KILL: 137
            MAX_ATTEMPTS: 3
            SIGTERM_TIMEOUT: 60s
            SIGKILL_TIMEOUT: 10s
            PYTEST_TIMEOUT: 10
        run: |
            set -ex
            pip install src/server/tests tests/server
            timeout -k $SIGKILL_TIMEOUT $SIGTERM_TIMEOUT \
                pytest -vv \
                    --showlocals \
                    --timeout=$PYTEST_TIMEOUT \
                    --execution-strategy="concurrent" \
                    tests/server
            set +e
            for (( ATTEMPT = 1; ATTEMPT <= MAX_ATTEMPTS; ATTEMPT++ )); do
                echo "Attempt $ATTEMPT of $MAX_ATTEMPTS"
                timeout -k $SIGKILL_TIMEOUT $SIGTERM_TIMEOUT \
                    pytest -vv \
                        --showlocals \
                        --timeout=$PYTEST_TIMEOUT \
                        --execution-strategy="parallel" \
                        tests/server
                EXIT_CODE=$?
                if [ $EXIT_CODE -eq $EXIT_SUCCESS ]; then
                    break
                fi
                echo "Command failed with exit code: $EXIT_CODE" 1>&2
            done
            set -e
            exit $EXIT_CODE
      # end of "LSP Tests" CI job

      # the below code is taken from earlier "Check SciPy Build and Test Run" CI job
      # earlier also, we used to run this on ubuntu with LLVM version 11
      - name: Test SciPy
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/scipy/scipy.git
            cd scipy
            git checkout 527f2ddcda98ebf4dae37abc38c85082218fcd6a
            find . -name "*.f" > files.txt
            files=$(<files.txt)
            for file in $files; do
                ../src/bin/lfortran --fixed-form fmt --no-color $file > $file.f90
                gfortran -fallow-argument-mismatch -ffree-line-length-none -c $file.f90 -o $file.o
                #if [[ "$file" == *"minpack"* ]]; then
                #    if [[ "$file" != *"dpmpar.f"* ]]; then
                #        ../src/bin/lfortran --show-asr --no-indent --no-color --fixed-form --implicit-typing --implicit-interface $file > $file.asr
                #    fi
                #fi

            done

            cd ..
            rm -rf scipy/
            git clone https://github.com/pranavchiku/scipy.git
            cd scipy
            git checkout -t origin/scipy1
            git checkout a70f11a305edd024cb9a0e5048257eb0f51e29e1
            find . -name "*.f" > files.txt
            files=$(<files.txt)
            for file in $files; do
                ../src/bin/lfortran --fixed-form --implicit-typing --implicit-interface --implicit-argument-casting --show-asr --no-color $file > $file.f90
            done
            cd ..
            rm -rf scipy/

      - name: Build SciPy
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        shell: bash -e -x -l {0}
        run: |
            git clone https://github.com/scipy/scipy
            cd scipy
            git remote add ondrej https://github.com/certik/scipy
            git fetch ondrej
            git checkout -t ondrej/merge_special_minpack_minpack2_fitpack_integrate_01
            git checkout 503037097dad5a7d33c1445e8778a9cdf1f9ef11
            micromamba env create -f environment.yml
            micromamba activate scipy-dev
            git submodule update --init
            mkdir lfortran-build/
            cd lfortran-build/
            LIBRARY_PATH="`pwd`/../../src/runtime/"
            FC=$(pwd)/../../src/bin/lfortran cmake \
              -DCMAKE_Fortran_FLAGS=--verbose \
              -DLFORTRAN_RUNTIME_LIBRARY_PATH=$LIBRARY_PATH \
              ..
            make install
            cp ${{ github.workspace }}/src/runtime/liblfortran_runtime.*  $CONDA_PREFIX/lib
            cd ../
            python dev.py build

      - name: Test SciPy Special (Specfun, Amos, Mach and Cdflib)
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        shell: bash -e -x -l {0}
        run: |
            cd scipy/
            micromamba activate scipy-dev
            python dev.py test -t scipy.special -v

      - name: Test SciPy Minpack & Minpack2
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        shell: bash -e -x -l {0}
        run: |
            cd scipy/
            micromamba activate scipy-dev
            python dev.py test -t scipy.optimize -v

      - name: Test SciPy Fitpack
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        shell: bash -e -x -l {0}
        run: |
            cd scipy/
            micromamba activate scipy-dev
            python dev.py test -t scipy.interpolate -v

      - name: Test SciPy Mach & Quadpack (Integrate)
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        shell: bash -e -x -l {0}
        run: |
            cd scipy/
            micromamba activate scipy-dev
            python dev.py test -t scipy.integrate -v

      # end of SciPy related testing

      # below code is from "Check Third Party Code Compilation"
      - name: Test third party codes
        shell: bash -e -x -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            export PATH="$(pwd)/src/bin:$PATH"
            export LFORTRAN_RUN_EXHAUSTIVE_TESTS=0
            RUNNER_OS="${{matrix.os}}" FC="$(pwd)/src/bin/lfortran" ci/test_third_party_codes.sh

      # The below projects are tested with a higher CMake version, so replace the current installed version
      - name: Override cmake version to 3.31.2
        if: contains(matrix.os, 'ubuntu')
        run: micromamba install -y -n lf cmake=3.31.2

      - name: Test Examples/Project 1
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            cd ./examples/project1
            FC=../../src/bin/lfortran cmake .
            cmake --build . -v
            ./project1

      - name: Test Examples/Project 2
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            cd ./examples/project2
            FC=../../src/bin/lfortran cmake .
            cmake --build . -v
            ./doconcurrent

      - name: Test Examples/Project 3
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            cd ./examples/project3
            FC=../../src/bin/lfortran cmake .
            cmake --build . -v
            ./project3

      - name: Test Lapack
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: |
            export PATH="$(pwd)/src/bin:$PATH"
            git clone https://github.com/gxyd/lapack.git
            cd lapack
            git fetch origin lf_07
            git checkout lf_07
            git checkout 9d9e48987ca109d46b92d515b59cb591fab9859a
            cd build
            micromamba create -f environment_unix.yml
            micromamba activate lapack
            ./build_lf.sh
      # end of "Check Third Party Code Compilation"

      ## Question - do we restore the version of cmake to 3.29.1 again now?
      # The below projects are tested with a higher CMake version, so replace the current installed version
      - name: Restore cmake version to 3.29.1
        if: contains(matrix.os, 'ubuntu')
        run: micromamba install -y -n lf cmake=3.29.1

      # below code is from CI job "Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM
      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test integration_tests with GFortran
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            cd integration_tests
            ./run_tests.py -b gfortran

      # Question: currently this is tested with LLVM version 11 - I think it should be 20?
      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Build Linux
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            ./build0.sh
            export CXXFLAGS="-Werror"
            export CFLAGS="-Werror"
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DWITH_LSP=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DWITH_RUNTIME_STACKTRACE=yes \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

            cmake --build . -j16 --target install

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test Debug Build Linux
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            ctest
            ./run_tests.py
            ./run_tests.py -vh
            cd integration_tests
            ./run_tests.py -m
            ./run_tests.py -b llvm
            ./run_tests.py -b llvm -f -nf16

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test OpenMP
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            cd integration_tests
            ./run_tests.py -b llvm_omp

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test Fortran Backend
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            cd integration_tests
            ./run_tests.py -b fortran -j1
            ./run_tests.py -b fortran -f -j1

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test C/C++ Backend
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            mkdir build-kokkos
            cd build-kokkos
            wget https://github.com/kokkos/kokkos/archive/3.1.01.tar.gz
            tar xaf 3.1.01.tar.gz
            cd kokkos-3.1.01
            mkdir build
            cd build
            export LFORTRAN_KOKKOS_DIR=$HOME/ext/kokkos
            cmake -DCMAKE_INSTALL_PREFIX=$LFORTRAN_KOKKOS_DIR -DKokkos_ENABLE_OPENMP=On -DKokkos_ARCH_HSW=On ..
            make
            make install
            cd ../../..

            cd integration_tests
            ./run_tests.py -b cpp c c_nopragma
            ./run_tests.py -b cpp c c_nopragma -f

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test CPP
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            shell ci/test_cpp_version.sh

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Show Node Info
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
          set -ex
          which node
          node --version

      - name: Test GFortran, Debug Build, Fortran, OpenMP, C/C++ backend, Upload Tarball, CPP Build, WASM - Test WASM backend
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu') && contains(matrix.llvm-version, '11')
        run: |
            cd integration_tests
            ./run_tests.py -b wasm
            ./run_tests.py -b wasm -f

  build_to_wasm_and_upload:
    name: Build LFortran to WASM and Upload
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name : Remove existing node
        shell: bash -e -l {0}
        run : |
            which node
            node -v
            sudo rm -rf /usr/local/bin/node /usr/local/bin/npm

      - name: Install Emscripten from Git
        # TODO: This fails with "-e" for some reason:
        shell: bash -l {0}
        run: |
            mkdir $HOME/ext
            cd $HOME/ext

            git clone https://github.com/emscripten-core/emsdk.git
            cd emsdk

            ./emsdk install 3.1.35

            ./emsdk activate 3.1.35

            ./emsdk install node-18.20.3-64bit

            ./emsdk activate node-18.20.3-64bit

      - name: Show Emscripten and Node Info
        shell: bash -l {0}
        run: |
            set -ex
            # Activate PATH and other environment variables in the current terminal
            source $HOME/ext/emsdk/emsdk_env.sh
            emcc -v
            em++ -v
            which node
            node -v

      - name: Build to WASM
        shell: bash -l {0}
        run: |
            set -ex
            source $HOME/ext/emsdk/emsdk_env.sh # Activate Emscripten
            ./build_to_wasm.sh

      - name: Test built lfortran.wasm
        shell: bash -l {0}
        run: |
            set -ex
            source $HOME/ext/emsdk/emsdk_env.sh # Activate Emscripten
            which node
            node -v
            node src/lfortran/tests/test_lfortran.js

      - name: Upload to wasm_builds
        shell: bash -l {0}
        run: |
            ci/upload_lfortran_wasm.sh
        env:
          SSH_PRIVATE_KEY_WASM_BUILDS: ${{ secrets.SSH_PRIVATE_KEY_WASM_BUILDS }}
