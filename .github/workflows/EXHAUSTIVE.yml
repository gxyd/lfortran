name: Exhaustive check

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

# For a PR #7488 against main branch, the `group` will become: CI-{{ 7488 || 'main' }}
# which eventually evaluates to: CI-7488 and 'main' isn't used.
# NOTE: `||` acts as a logical OR and a default operator both,
# see: https://docs.github.com/en/actions/learn-github-actions/expressions#operators.
# When it isn't a PR against main but instead a commit pushed (or merged) to main, then `group` will
# evaluate to CI-main but "cancel-in-progress" evaluates to false, so the CI on main
# will run in a single group CI-main, in a *queue* (which will slow down the CI on main),
# and save runner for PR's but no previous CI will be cancelled on main
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || 'main' }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}


env:
  MACOSX_DEPLOYMENT_TARGET: 14.0

jobs:
  release:
    name: Check Release build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          # the below key was ${{ github.job }}-${{ matrix.os }}, but doesn't have "matrix" at all in it
          # hence I substituted "ubuntu-latest" directly for it
          key: ${{ github.job }}-ubuntu-latest

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            export CXXFLAGS="-Werror"
            export CFLAGS="-Werror"
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Release \
              -DWITH_LLVM=yes \
              -DWITH_LSP=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DWITH_RUNTIME_STACKTRACE=yes \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_INSTALL_BINDIR=bin/tastic \
              -DCMAKE_INSTALL_LIBDIR=oh/my/sweet/lib \
              -DCMAKE_INSTALL_INCLUDEDIR=incl/O/Matic \
              -DCMAKE_INSTALL_MANDIR=man/O/man \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux
        shell: bash -e -l {0}
        run: |
            ctest
            ./run_tests.py
            ./run_tests.py -vh
            cd integration_tests
            ./run_tests.py -m
            ./run_tests.py -b llvm
            ./run_tests.py -b llvm -f -nf16

      - name: Test Installation
        shell: bash -e -l {0}
        run: |
            test -x inst/bin/tastic/lfortran
            test -f inst/oh/my/sweet/lib/liblfortran_runtime_static.a
            test -f inst/oh/my/sweet/lib/liblfortran_runtime.so
            test -f inst/incl/O/Matic/lfortran/impure/lfortran_intrinsics.h
            test -f inst/man/O/man/man1/lfortran.1

  third_party_code_compile:
    name: Check Third Party Code Compilation - OS (${{ matrix.os }}), LLVM (${{ matrix.llvm-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-latest", "ubuntu-latest"]
        llvm-version: ["11", "19"]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux_llvm.yml
          create-args: >-
            python=${{ matrix.python-version }}
            llvmdev=${{ matrix.llvm-version }}
            bison=3.4
            openblas=0.3.21
            llvm-openmp=14.0.4
            make=4.3
            openmpi=5.0.6

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Install libunwind
        if: contains(matrix.os, 'ubuntu') && (matrix.llvm-version != 11)
        run: micromamba install -y -n lf libunwind=1.7.2

      - name: Build Linux
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DWITH_LSP=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Build MacOS
        shell: bash -e -l {0}
        if: contains(matrix.os, 'macos')
        run: |
            ./build0.sh
            ./build1.sh

      - name: Test third party codes
        shell: bash -e -x -l {0}
        run: |
            export PATH="$(pwd)/src/bin:$PATH"
            RUNNER_OS="${{matrix.os}}" FC="$(pwd)/src/bin/lfortran" ci/test_third_party_codes.sh

      # The below projects are tested with a higher CMake version, so replace the current installed version
      - name: Override cmake version to 3.31.2
        if: contains(matrix.os, 'ubuntu')
        run: micromamba install -y -n lf cmake=3.31.2

      - name: Test Examples/Project 1
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            cd ./examples/project1
            FC=../../src/bin/lfortran cmake .
            cmake --build . -v
            ./project1

      - name: Test Examples/Project 2
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            cd ./examples/project2
            FC=../../src/bin/lfortran cmake .
            cmake --build . -v
            ./doconcurrent

      - name: Test Examples/Project 3
        shell: bash -e -l {0}
        if: contains(matrix.os, 'ubuntu')
        run: |
            cd ./examples/project3
            FC=../../src/bin/lfortran cmake .
            cmake --build . -v
            ./project3

      - name: Test Lapack
        shell: bash -e -l {0}
        run: |
            export PATH="$(pwd)/src/bin:$PATH"
            git clone https://github.com/gxyd/lapack.git
            cd lapack
            git fetch origin lf_07
            git checkout lf_07
            git checkout 9d9e48987ca109d46b92d515b59cb591fab9859a
            cd build
            micromamba create -f environment_unix.yml
            micromamba activate lapack
            ./build_lf.sh

  test_llvm:
    name: Test LLVM ${{ matrix.llvm-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # this is only run on ubuntu intentionally
        os: ["ubuntu-latest"]
        # Note: The LLVM 11 test is redundant, since it is already tested by
        # most other tests (since LLVM 11 is our default version), but we have
        # it here as well for consistency, and that way other tests can freely
        # switch to other versions as needed. We test all versions here in
        # exactly the same manner, to ensure that users can just change the
        # `llvmdev` version in their conda environment and everything will just
        # work.
        llvm-version: ["10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        if: contains(matrix.llvm-version, '19')
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux_llvm.yml
          create-args: >-
            python=${{ matrix.python-version }}
            llvmdev=${{ matrix.llvm-version }}
            bison=3.4
            openblas=0.3.21
            llvm-openmp=14.0.4
            make=4.3
            nodejs=18.20.4
            openmpi=5.0.6

      - uses: mamba-org/setup-micromamba@v2.0.2
        if: contains(matrix.llvm-version, '10')
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux_llvm.yml
          create-args: >-
            python=${{ matrix.python-version }}
            llvmdev=${{ matrix.llvm-version }}
            bison=3.4
            openblas=0.3.21
            llvm-openmp=14.0.4
            make=4.3
            nodejs=18.20.2
            openmpi=5.0.6

      - uses: mamba-org/setup-micromamba@v2.0.2
        if: contains(matrix.llvm-version, '12')
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux_llvm.yml
          create-args: >-
            python=${{ matrix.python-version }}
            llvmdev=${{ matrix.llvm-version }}
            bison=3.4
            openblas=0.3.21
            llvm-openmp=14.0.4
            make=4.3
            openmpi=5.0.3

      - uses: mamba-org/setup-micromamba@v2.0.2
        if: ${{! (contains(matrix.llvm-version, '10') || contains(matrix.llvm-version, '19') || contains(matrix.llvm-version, '12'))}}
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux_llvm.yml
          create-args: >-
            python=${{ matrix.python-version }}
            llvmdev=${{ matrix.llvm-version }}
            bison=3.4
            openblas=0.3.21
            llvm-openmp=14.0.4
            make=4.3
            openmpi=5.0.6

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.llvm-version }}

      - name: Install libunwind
        if: matrix.llvm-version > 11
        run: micromamba install -y -n lf libunwind=1.7.2

      - name: Setup WASI SDK
        if: contains(matrix.llvm-version, '10') || contains(matrix.llvm-version, '19')
        shell: bash -e -l {0}
        run: |
          cd $HOME
          curl -o wasi-sdk.tar.gz -L https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-21/wasi-sdk-21.0-linux.tar.gz
          tar -xvf wasi-sdk.tar.gz
          export WASI_SDK_PATH=$HOME/wasi-sdk-21.0
          echo $WASI_SDK_PATH
          $WASI_SDK_PATH/bin/clang --version

      - name: Install wasmtime
        if: contains(matrix.llvm-version, '10') || contains(matrix.llvm-version, '19')
        shell: bash -e -l {0}
        run: |
          cd $HOME
          curl -o wasmtime.tar.gz -L https://github.com/bytecodealliance/wasmtime/releases/download/v19.0.2/wasmtime-v19.0.2-x86_64-linux.tar.xz
          tar -xvf wasmtime.tar.gz
          export PATH=$HOME/wasmtime-v19.0.2-x86_64-linux:$PATH
          wasmtime --version

      - name: Setup EMSCRIPTEN SDK
        if: contains(matrix.llvm-version, '10') || contains(matrix.llvm-version, '19')
        shell: bash -e -l {0}
        run: |
          cd $HOME
          curl -o emsdk.tar.gz -L https://github.com/emscripten-core/emsdk/archive/refs/tags/3.1.59.tar.gz
          tar -xvf emsdk.tar.gz
          export EMSDK_PATH=$HOME/emsdk-3.1.59
          echo $EMSDK_PATH
          cd $EMSDK_PATH
          ./emsdk install latest
          ./emsdk activate latest

      - name: Build Linux ( WASM )
        if: contains(matrix.llvm-version, '10') || contains(matrix.llvm-version, '19')
        shell: bash -e -l {0}
        run: |
            export WASI_SDK_PATH=$HOME/wasi-sdk-21.0
            export EMSDK_PATH=$HOME/emsdk-3.1.59
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DWITH_LSP=yes \
              -DWITH_TARGET_WASM=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux ( WASM )
        if: contains(matrix.llvm-version, '10') || contains(matrix.llvm-version, '19')
        shell: bash -e -l {0}
        run: |
            export WASI_SDK_PATH=$HOME/wasi-sdk-21.0
            export EMSDK_PATH=$HOME/emsdk-3.1.59
            export PATH=$HOME/wasmtime-v19.0.2-x86_64-linux:$PATH
            export WASMTIME_NEW_CLI=0
            cd integration_tests
            ./run_tests.py -b llvm_wasm llvm_wasm_emcc

      - name: Build Linux
        if: ${{! (contains(matrix.llvm-version, '10') || contains(matrix.llvm-version, '19'))}}
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DWITH_LSP=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      # LLVM 10-19 all work in exactly the same way, so the test is identical
      - name: Test Linux LLVM 10-16
        if: ${{(contains(matrix.llvm-version, '10') || contains(matrix.llvm-version, '11') || contains(matrix.llvm-version, '12') || contains(matrix.llvm-version, '13') || contains(matrix.llvm-version, '14') || contains(matrix.llvm-version, '15') || contains(matrix.llvm-version, '16'))}}
        shell: bash -e -l {0}
        run: |
            cd integration_tests
            ./run_tests.py -b llvm -sc
            ./run_tests.py -b llvm llvmImplicit
            ./run_tests.py -b llvm llvmImplicit -f -nf16

      - name: Test Linux LLVM 17-20
        if: ${{(contains(matrix.llvm-version, '17') || contains(matrix.llvm-version, '18') || contains(matrix.llvm-version, '19') || contains(matrix.llvm-version, '20'))}}
        shell: bash -e -l {0}
        run: |
            ctest --output-on-failure
            cd integration_tests
            ./run_tests.py -b llvm -sc
            ./run_tests.py -b llvm llvmImplicit
            ./run_tests.py -b llvm llvmImplicit -f

      - name: Test third party codes
        shell: bash -e -x -l {0}
        run: |
            export PATH="$(pwd)/src/bin:$PATH"
            RUNNER_OS="${{matrix.os}}" FC=lfortran ci/test_third_party_codes.sh

  upload_tarball:
    name: Upload Tarball
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - name: Upload Tarball
        shell: bash -e -l {0}
        run: |
          ./build0.sh
          lfortran_version=$(<version)
          pandoc --standalone --to man doc/man/lfortran.md -o doc/man/lfortran.1
          ci/create_source_tarball.sh $lfortran_version
          ci/upload_tarball.sh
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Upload Tarball to Release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        shell: bash -e -l {0}
        run: |
          ci/upload_tarball_to_release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # not sure if this should go in QUICK.yml?
  test_without_llvm:
    name: Test without LLVM Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux.yml
          create-args: >-
            python=3.10

      - name: Test
        shell: bash -e -l {0}
        run: |
          xonsh ci/test_without_llvm_backend.xsh
  test_mlir:
    name: Test MLIR backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_linux_llvm.yml
          create-args: >-
            python=3.10
            mlir=19.1.6
            llvm=19.1.6
            llvm-openmp=19.1.6
            libunwind=1.7.2

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Linux
        shell: bash -e -l {0}
        run: |
            ./build0.sh
            cmake . -GNinja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DWITH_LLVM=yes \
              -DWITH_LSP=yes \
              -DWITH_MLIR=yes \
              -DLFORTRAN_BUILD_ALL=yes \
              -DWITH_STACKTRACE=no \
              -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
              -DCMAKE_INSTALL_PREFIX=`pwd`/inst \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

            cmake --build . -j16 --target install

      - name: Test Linux
        shell: bash -e -l {0}
        run: |
            cd integration_tests
            ./run_tests.py -b mlir mlir_omp mlir_llvm_omp -j1

  upload_docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: mamba-org/setup-micromamba@v2.0.2
        with:
          micromamba-version: '2.0.4-0'
          environment-file: ci/environment_docs_linux.yml

      - uses: hendrikmuhs/ccache-action@main
        with:
          variant: sccache
          key: ${{ github.job }}-${{ matrix.os }}

      - name: Build Kernel
        shell: bash -e -l {0}
        run: |
          ./build0.sh
          export CXXFLAGS="-Werror"
          cmake . -GNinja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DWITH_LLVM=yes \
            -DWITH_LSP=yes \
            -DWITH_XEUS=yes \
            -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
            -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
            -DCMAKE_C_COMPILER_LAUNCHER=sccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

          ninja install
          ctest --output-on-failure
          jupyter kernelspec list --json

      - name: Build Docs
        shell: bash -e -l {0}
        working-directory: doc
        run: |
          $(command -v python) build.py

      - name: Upload Docs
        shell: bash -e -l {0}
        working-directory: doc
        run: |
          ../ci/upload_docs.sh
        env:
          SSH_PRIVATE_KEY_DOCS: ${{ secrets.SSH_PRIVATE_KEY_DOCS }}

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      USER: lfortran
      PROJECT: lfortran
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to the Container registry
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ env.REGISTRY }}/${{ env.USER }}/${{ env.PROJECT }}:latest
